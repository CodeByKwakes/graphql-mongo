var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { GraphQLNonNull, GraphQLList } from 'graphql';
import mongoose from 'mongoose';
import { Resolver, TypeComposer } from 'graphql-compose';
import GraphQLMongoID from '../types/mongoid';
import { limitHelperArgs, limitHelper } from './helpers/limit';
import { sortHelperArgs, sortHelper } from './helpers/sort';
import { projectionHelper } from './helpers/projection';


export default function findByIds(model, typeComposer, opts) {
  if (!model || !model.modelName || !model.schema) {
    throw new Error('First arg for Resolver findByIds() should be instance of Mongoose Model.');
  }

  if (!(typeComposer instanceof TypeComposer)) {
    throw new Error('Second arg for Resolver findByIds() should be instance of TypeComposer.');
  }

  return new Resolver({
    outputType: new GraphQLList(typeComposer.getType()),
    name: 'findByIds',
    kind: 'query',
    args: _extends({
      _ids: {
        name: '_ids',
        type: new GraphQLNonNull(new GraphQLList(GraphQLMongoID))
      }
    }, limitHelperArgs(_extends({}, opts && opts.limit)), sortHelperArgs(model, _extends({
      sortTypeName: 'SortFindByIds' + typeComposer.getTypeName() + 'Input'
    }, opts && opts.sort))),
    resolve: function resolve(resolveParams) {
      var args = resolveParams.args || {};

      if (!Array.isArray(args._ids)) {
        return Promise.resolve([]);
      }

      var selector = {};
      selector._id = {
        $in: args._ids.filter(function (id) {
          return mongoose.Types.ObjectId.isValid(id);
        }).map(function (id) {
          return mongoose.Types.ObjectId(id);
        }) };

      resolveParams.query = model.find(selector); // eslint-disable-line
      projectionHelper(resolveParams);
      limitHelper(resolveParams);
      sortHelper(resolveParams);
      return resolveParams.query.exec();
    }
  });
}