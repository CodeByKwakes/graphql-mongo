var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* eslint-disable no-use-before-define */

import { GraphQLEnumType } from 'graphql';
import { getIndexesFromModel, extendByReversedIndexes } from '../../utils/getIndexesFromModel';
import typeStorage from '../../typeStorage';


export var sortHelperArgs = function sortHelperArgs(model, opts) {
  if (!model || !model.modelName || !model.schema) {
    throw new Error('First arg for sortHelperArgs() should be instance of Mongoose Model.');
  }

  if (!opts || !opts.sortTypeName) {
    throw new Error('You should provide non-empty `sortTypeName` in options for sortHelperArgs().');
  }

  var gqSortType = getSortTypeFromModel(opts.sortTypeName, model);

  return {
    sort: {
      name: 'sort',
      type: gqSortType
    }
  };
};

export function sortHelper(resolveParams) {
  var sort = resolveParams && resolveParams.args && resolveParams.args.sort;
  if (sort && (typeof sort === 'undefined' ? 'undefined' : _typeof(sort)) === 'object' && Object.keys(sort).length > 0) {
    resolveParams.query = resolveParams.query.sort(sort); // eslint-disable-line
  }
}

export function getSortTypeFromModel(typeName, model) {
  var indexes = extendByReversedIndexes(getIndexesFromModel(model));

  var sortEnumValues = {};
  indexes.forEach(function (indexData) {
    var keys = Object.keys(indexData);
    var name = keys.join('__').toUpperCase().replace(/[^_a-zA-Z0-9]/i, '__');
    if (indexData[keys[0]] === 1) {
      name = name + '_ASC';
    } else if (indexData[keys[0]] === -1) {
      name = name + '_DESC';
    }
    sortEnumValues[name] = {
      name: name,
      value: indexData
    };
  });

  return typeStorage.getOrSet(typeName, new GraphQLEnumType({
    name: typeName,
    values: sortEnumValues
  }));
}