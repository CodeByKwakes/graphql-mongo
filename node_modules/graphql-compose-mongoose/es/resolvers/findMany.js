var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* eslint-disable no-param-reassign */

import { GraphQLList } from 'graphql';
import { Resolver, TypeComposer } from 'graphql-compose';
import { skipHelperArgs, skipHelper } from './helpers/skip';
import { limitHelperArgs, limitHelper } from './helpers/limit';
import { filterHelperArgs, filterHelper } from './helpers/filter';
import { sortHelperArgs, sortHelper } from './helpers/sort';
import { projectionHelper } from './helpers/projection';


export default function findMany(model, typeComposer, opts) {
  if (!model || !model.modelName || !model.schema) {
    throw new Error('First arg for Resolver findMany() should be instance of Mongoose Model.');
  }

  if (!(typeComposer instanceof TypeComposer)) {
    throw new Error('Second arg for Resolver findMany() should be instance of TypeComposer.');
  }

  return new Resolver({
    outputType: new GraphQLList(typeComposer.getType()),
    name: 'findMany',
    kind: 'query',
    args: _extends({}, filterHelperArgs(typeComposer, model, _extends({
      filterTypeName: 'FilterFindMany' + typeComposer.getTypeName() + 'Input',
      model: model
    }, opts && opts.filter)), skipHelperArgs(), limitHelperArgs(_extends({}, opts && opts.limit)), sortHelperArgs(model, _extends({
      sortTypeName: 'SortFindMany' + typeComposer.getTypeName() + 'Input'
    }, opts && opts.sort))),
    resolve: function resolve(resolveParams) {
      resolveParams.query = model.find();
      filterHelper(resolveParams);
      skipHelper(resolveParams);
      limitHelper(resolveParams);
      sortHelper(resolveParams);
      projectionHelper(resolveParams);
      return resolveParams.query.exec();
    }
  });
}