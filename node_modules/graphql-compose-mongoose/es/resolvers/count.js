var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* eslint-disable no-param-reassign */

import { GraphQLInt } from 'graphql';
import { Resolver, TypeComposer } from 'graphql-compose';
import { filterHelperArgs, filterHelper } from './helpers/filter';


export default function count(model, typeComposer, opts) {
  if (!model || !model.modelName || !model.schema) {
    throw new Error('First arg for Resolver count() should be instance of Mongoose Model.');
  }

  if (!(typeComposer instanceof TypeComposer)) {
    throw new Error('Second arg for Resolver count() should be instance of TypeComposer.');
  }

  return new Resolver({
    outputType: GraphQLInt,
    name: 'count',
    kind: 'query',
    args: _extends({}, filterHelperArgs(typeComposer, model, _extends({
      filterTypeName: 'Filter' + typeComposer.getTypeName() + 'Input',
      model: model
    }, opts && opts.filter))),
    resolve: function resolve(resolveParams) {
      resolveParams.query = model.find();
      filterHelper(resolveParams);
      return resolveParams.query.count().exec();
    }
  });
}