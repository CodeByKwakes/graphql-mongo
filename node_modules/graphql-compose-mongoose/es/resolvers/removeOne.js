var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* eslint-disable no-param-reassign */

import { GraphQLObjectType } from 'graphql';
import { Resolver, TypeComposer } from 'graphql-compose';
import GraphQLMongoID from '../types/mongoid';
import typeStorage from '../typeStorage';
import { filterHelperArgs, filterHelper } from './helpers/filter';
import { sortHelperArgs, sortHelper } from './helpers/sort';
import { projectionHelper } from './helpers/projection';


export default function removeOne(model, typeComposer, opts) {
  if (!model || !model.modelName || !model.schema) {
    throw new Error('First arg for Resolver removeOne() should be instance of Mongoose Model.');
  }

  if (!(typeComposer instanceof TypeComposer)) {
    throw new Error('Second arg for Resolver removeOne() should be instance of TypeComposer.');
  }

  var outputTypeName = 'RemoveOne' + typeComposer.getTypeName() + 'Payload';
  var outputType = typeStorage.getOrSet(outputTypeName, new GraphQLObjectType({
    name: outputTypeName,
    fields: {
      recordId: {
        type: GraphQLMongoID,
        description: 'Removed document ID'
      },
      record: {
        type: typeComposer.getType(),
        description: 'Removed document'
      }
    }
  }));

  var resolver = new Resolver({
    name: 'removeOne',
    kind: 'mutation',
    description: 'Remove one document: ' + '1) Remove with hooks via findOneAndRemove. ' + '2) Return removed document.',
    outputType: outputType,
    args: _extends({}, filterHelperArgs(typeComposer, model, _extends({
      filterTypeName: 'FilterRemoveOne' + typeComposer.getTypeName() + 'Input',
      model: model
    }, opts && opts.filter)), sortHelperArgs(model, _extends({
      sortTypeName: 'SortRemoveOne' + typeComposer.getTypeName() + 'Input'
    }, opts && opts.sort))),
    resolve: function resolve(resolveParams) {
      resolveParams.query = model.findOneAndRemove({});
      filterHelper(resolveParams);
      sortHelper(resolveParams);
      projectionHelper(resolveParams);

      return (resolveParams.beforeQuery ? Promise.resolve(resolveParams.beforeQuery(resolveParams.query)) : resolveParams.query.exec()).then(function (record) {
        if (record) {
          return {
            record: record,
            recordId: typeComposer.getRecordIdFn()(record)
          };
        }

        return null;
      });
    }
  });

  return resolver;
}