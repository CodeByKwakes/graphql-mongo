var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* eslint-disable no-param-reassign */

import { GraphQLObjectType } from 'graphql';
import { Resolver, TypeComposer } from 'graphql-compose';
import { recordHelperArgs } from './helpers/record';
import typeStorage from '../typeStorage';
import GraphQLMongoID from '../types/mongoid';


export default function createOne(model, typeComposer, opts) {
  if (!model || !model.modelName || !model.schema) {
    throw new Error('First arg for Resolver createOne() should be instance of Mongoose Model.');
  }

  if (!(typeComposer instanceof TypeComposer)) {
    throw new Error('Second arg for Resolver createOne() should be instance of TypeComposer.');
  }

  var outputTypeName = 'CreateOne' + typeComposer.getTypeName() + 'Payload';
  var outputType = typeStorage.getOrSet(outputTypeName, new GraphQLObjectType({
    name: outputTypeName,
    fields: {
      recordId: {
        type: GraphQLMongoID,
        description: 'Created document ID'
      },
      record: {
        type: typeComposer.getType(),
        description: 'Created document'
      }
    }
  }));

  var resolver = new Resolver({
    name: 'createOne',
    kind: 'mutation',
    description: 'Create one document with mongoose defaults, setters, hooks and validation',
    outputType: outputType,
    args: _extends({}, recordHelperArgs(typeComposer, _extends({
      recordTypeName: 'CreateOne' + typeComposer.getTypeName() + 'Input',
      removeFields: ['id', '_id'],
      isRequired: true
    }, opts && opts.record))),
    resolve: function resolve(resolveParams) {
      var recordData = resolveParams.args && resolveParams.args.record || {};

      if (!((typeof recordData === 'undefined' ? 'undefined' : _typeof(recordData)) === 'object') || Object.keys(recordData).length === 0) {
        return Promise.reject(new Error(typeComposer.getTypeName() + '.createOne resolver requires ' + 'at least one value in args.record'));
      }

      // $FlowFixMe
      return Promise.resolve(new model(recordData)).then(function (doc) {
        if (resolveParams.beforeRecordMutate) {
          return resolveParams.beforeRecordMutate(doc);
        }
        return doc;
      }).then(function (doc) {
        return doc.save();
      }).then(function (record) {
        if (record) {
          return {
            record: record,
            recordId: typeComposer.getRecordIdFn()(record)
          };
        }

        return null;
      });
    }
  });

  return resolver;
}