var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* eslint-disable no-param-reassign */

import { GraphQLObjectType, GraphQLInt } from 'graphql';
import { Resolver, TypeComposer } from 'graphql-compose';
import { filterHelperArgs, filterHelper } from './helpers/filter';
import typeStorage from '../typeStorage';

export default function removeMany(model, typeComposer, opts) {
  if (!model || !model.modelName || !model.schema) {
    throw new Error('First arg for Resolver removeMany() should be instance of Mongoose Model.');
  }

  if (!(typeComposer instanceof TypeComposer)) {
    throw new Error('Second arg for Resolver removeMany() should be instance of TypeComposer.');
  }

  var outputTypeName = 'RemoveMany' + typeComposer.getTypeName() + 'Payload';
  var outputType = typeStorage.getOrSet(outputTypeName, new GraphQLObjectType({
    name: outputTypeName,
    fields: {
      numAffected: {
        type: GraphQLInt,
        description: 'Affected documents number'
      }
    }
  }));

  var resolver = new Resolver({
    name: 'removeMany',
    kind: 'mutation',
    description: 'Remove many documents without returning them: ' + 'Use Query.remove mongoose method. ' + 'Do not apply mongoose defaults, setters, hooks and validation. ',
    outputType: outputType,
    args: _extends({}, filterHelperArgs(typeComposer, model, _extends({
      filterTypeName: 'FilterRemoveMany' + typeComposer.getTypeName() + 'Input',
      isRequired: true,
      model: model
    }, opts && opts.filter))),
    resolve: function resolve(resolveParams) {
      var filterData = resolveParams.args && resolveParams.args.filter || {};

      if (!((typeof filterData === 'undefined' ? 'undefined' : _typeof(filterData)) === 'object') || Object.keys(filterData).length === 0) {
        return Promise.reject(new Error(typeComposer.getTypeName() + '.removeMany resolver requires ' + 'at least one value in args.filter'));
      }

      resolveParams.query = model.find();
      filterHelper(resolveParams);
      resolveParams.query = resolveParams.query.remove();

      return (resolveParams.beforeQuery ? Promise.resolve(resolveParams.beforeQuery(resolveParams.query)) : resolveParams.query.exec()).then(function (res) {
        if (res.result && res.result.ok) {
          return {
            numAffected: res.result.n
          };
        }

        return Promise.reject(res);
      });
    }
  });

  return resolver;
}