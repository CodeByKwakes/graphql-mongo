var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* eslint-disable no-param-reassign */

import { GraphQLObjectType } from 'graphql';
import { Resolver, TypeComposer } from 'graphql-compose';
import { recordHelperArgs } from './helpers/record';
import findById from './findById';
import GraphQLMongoID from '../types/mongoid';
import typeStorage from '../typeStorage';

export default function updateById(model, typeComposer, opts) {
  if (!model || !model.modelName || !model.schema) {
    throw new Error('First arg for Resolver updateById() should be instance of Mongoose Model.');
  }

  if (!(typeComposer instanceof TypeComposer)) {
    throw new Error('Second arg for Resolver updateById() should be instance of TypeComposer.');
  }

  var findByIdResolver = findById(model, typeComposer);

  var outputTypeName = 'UpdateById' + typeComposer.getTypeName() + 'Payload';
  var outputType = typeStorage.getOrSet(outputTypeName, new GraphQLObjectType({
    name: outputTypeName,
    fields: {
      recordId: {
        type: GraphQLMongoID,
        description: 'Updated document ID'
      },
      record: {
        type: typeComposer.getType(),
        description: 'Updated document'
      }
    }
  }));

  var resolver = new Resolver({
    name: 'updateById',
    kind: 'mutation',
    description: 'Update one document: ' + '1) Retrieve one document by findById. ' + '2) Apply updates to mongoose document. ' + '3) Mongoose applies defaults, setters, hooks and validation. ' + '4) And save it.',
    outputType: outputType,
    args: _extends({}, recordHelperArgs(typeComposer, _extends({
      recordTypeName: 'UpdateById' + typeComposer.getTypeName() + 'Input',
      requiredFields: ['_id'],
      isRequired: true
    }, opts && opts.record))),
    resolve: function resolve(resolveParams) {
      var recordData = resolveParams.args && resolveParams.args.record || {};

      if (!((typeof recordData === 'undefined' ? 'undefined' : _typeof(recordData)) === 'object')) {
        return Promise.reject(new Error(typeComposer.getTypeName() + '.updateById resolver requires args.record value'));
      }

      if (!recordData._id) {
        return Promise.reject(new Error(typeComposer.getTypeName() + '.updateById resolver requires args.record._id value'));
      }

      resolveParams.args._id = recordData._id;
      delete recordData._id;
      resolveParams.projection = resolveParams.projection && resolveParams.projection.record || {};

      return findByIdResolver.resolve(resolveParams).then(function (doc) {
        if (resolveParams.beforeRecordMutate) {
          return resolveParams.beforeRecordMutate(doc);
        }
        return doc;
      })
      // save changes to DB
      .then(function (doc) {
        if (!doc) {
          return Promise.reject('Document not found');
        }
        if (recordData) {
          doc.set(recordData);
          return doc.save();
        }
        return doc;
      })
      // prepare output payload
      .then(function (record) {
        if (record) {
          return {
            record: record,
            recordId: typeComposer.getRecordIdFn()(record)
          };
        }

        return null;
      });
    }
  });

  return resolver;
}