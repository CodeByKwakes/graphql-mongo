'use strict';

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prepareEdgeType = prepareEdgeType;
exports.prepareConnectionType = prepareConnectionType;

var _graphql = require('graphql');

var _cursorType = require('./cursorType');

var _cursorType2 = _interopRequireDefault(_cursorType);

var _pageInfoType = require('./pageInfoType');

var _pageInfoType2 = _interopRequireDefault(_pageInfoType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cachedConnectionTypes = new _weakMap2.default();
/* eslint-disable arrow-body-style */

var cachedEdgeTypes = new _weakMap2.default();

function prepareEdgeType(typeComposer) {
  var name = typeComposer.getTypeName() + 'Edge';
  var type = typeComposer.getType();

  if (cachedEdgeTypes.has(type)) {
    return cachedEdgeTypes.get(type);
  }

  var edgeType = new _graphql.GraphQLObjectType({
    name: name,
    description: 'An edge in a connection.',
    fields: function fields() {
      return {
        node: {
          type: typeComposer.getType(),
          description: 'The item at the end of the edge'
        },
        cursor: {
          type: new _graphql.GraphQLNonNull(_cursorType2.default),
          description: 'A cursor for use in pagination'
        }
      };
    }
  });
  edgeType.ofType = type;

  cachedEdgeTypes.set(type, edgeType);
  return edgeType;
}

function prepareConnectionType(typeComposer) {
  var name = typeComposer.getTypeName() + 'Connection';
  var type = typeComposer.getType();

  if (cachedConnectionTypes.has(type)) {
    return cachedConnectionTypes.get(type);
  }

  var connectionType = new _graphql.GraphQLObjectType({
    name: name,
    description: 'A connection to a list of items.',
    fields: function fields() {
      return {
        count: {
          type: _graphql.GraphQLInt,
          description: 'Total object count.'
        },
        pageInfo: {
          type: new _graphql.GraphQLNonNull(_pageInfoType2.default),
          description: 'Information to aid in pagination.'
        },
        edges: {
          type: new _graphql.GraphQLList(prepareEdgeType(typeComposer)),
          description: 'Information to aid in pagination.'
        }
      };
    }
  });
  connectionType.ofType = type;

  cachedConnectionTypes.set(type, connectionType);
  return connectionType;
}