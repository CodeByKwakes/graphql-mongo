
/* eslint-disable arrow-body-style */

import { GraphQLInt, GraphQLObjectType, GraphQLNonNull, GraphQLList } from 'graphql';

import GraphQLConnectionCursor from './cursorType';

import PageInfoType from './pageInfoType';

var cachedConnectionTypes = new WeakMap();
var cachedEdgeTypes = new WeakMap();

export function prepareEdgeType(typeComposer) {
  var name = typeComposer.getTypeName() + 'Edge';
  var type = typeComposer.getType();

  if (cachedEdgeTypes.has(type)) {
    return cachedEdgeTypes.get(type);
  }

  var edgeType = new GraphQLObjectType({
    name: name,
    description: 'An edge in a connection.',
    fields: function fields() {
      return {
        node: {
          type: typeComposer.getType(),
          description: 'The item at the end of the edge'
        },
        cursor: {
          type: new GraphQLNonNull(GraphQLConnectionCursor),
          description: 'A cursor for use in pagination'
        }
      };
    }
  });
  edgeType.ofType = type;

  cachedEdgeTypes.set(type, edgeType);
  return edgeType;
}

export function prepareConnectionType(typeComposer) {
  var name = typeComposer.getTypeName() + 'Connection';
  var type = typeComposer.getType();

  if (cachedConnectionTypes.has(type)) {
    return cachedConnectionTypes.get(type);
  }

  var connectionType = new GraphQLObjectType({
    name: name,
    description: 'A connection to a list of items.',
    fields: function fields() {
      return {
        count: {
          type: GraphQLInt,
          description: 'Total object count.'
        },
        pageInfo: {
          type: new GraphQLNonNull(PageInfoType),
          description: 'Information to aid in pagination.'
        },
        edges: {
          type: new GraphQLList(prepareEdgeType(typeComposer)),
          description: 'Information to aid in pagination.'
        }
      };
    }
  });
  connectionType.ofType = type;

  cachedConnectionTypes.set(type, connectionType);
  return connectionType;
}