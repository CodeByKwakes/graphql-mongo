var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* eslint-disable no-param-reassign */

export default function deepmerge(target, src) {
  if (Array.isArray(src)) {
    var _ret = function () {
      var dst = [];
      target = target || [];
      dst = dst.concat(target);
      src.forEach(function (e, i) {
        if (typeof dst[i] === 'undefined') {
          dst[i] = e;
        } else if ((typeof e === 'undefined' ? 'undefined' : _typeof(e)) === 'object') {
          dst[i] = deepmerge(target[i], e);
        } else {
          if (target.indexOf(e) === -1) {
            dst.push(e);
          }
        }
      });
      return {
        v: dst
      };
    }();

    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
  }

  var dst = {};
  if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object') {
    Object.keys(target).forEach(function (key) {
      dst[key] = target[key];
    });
  }
  Object.keys(src).forEach(function (key) {
    if (_typeof(src[key]) !== 'object' || !src[key]) {
      dst[key] = src[key];
    } else {
      if (!target[key]) {
        dst[key] = src[key];
      } else {
        dst[key] = deepmerge(target[key], src[key]);
      }
    }
  });

  return dst;
}